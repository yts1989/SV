%sort for presslevel of brakes and threttoles and sort for batterylevel of batteries indates how much energy they have. 
%sort for the source of energy generating.
sort MotorMode = struct accelerate|decelerate|release;
     BatteryLevel = struct low|middle|full;
     BatteryStatus = struct load|provide|idle;   
%     Battery = struct battery(group:Group,level:BatteryLevel,status:BatteryStatus);
     Source = struct brake|solarpanel;
     Direction = struct forward|backward;
     Group = struct groupA|groupB;
     Temperature = struct normal|overheated;

map speed_upper_bound:Nat;
    speed_lower_bound:Nat;
    speed_step:Nat;
    speed_down_by_step:Nat->Nat;
    speed_up_by_step:Nat->Nat;
var n:Nat;
eqn speed_upper_bound = 100;
    speed_lower_bound = 0;
    speed_step = 50;
    speed_down_by_step(n)=Int2Nat(if(n>speed_step,n-speed_step,0));
    speed_up_by_step(n)=Int2Nat(if(n<speed_upper_bound,n+speed_step,speed_upper_bound));
	


act do_switch_on;%start_button
    do_switch_off;
    emergency_detected:Bool;

    %the following actions all about motor
    brake_pressed;
    brake_released;
    throttle_pressed;
    throttle_released;
    cruise_mode_set;
    cruise_mode_unset;
    speed_up;
    speed_down;
    speed_down_zero;
    %interal action
    motor2central_motor_cruise,motor2central_central_cruise,motor2central_cruise:Bool#Nat;
    central2motor_central_cruise,central2motor_motor_cruise,central2motor_cruise:Bool#Nat;
    central2motor_central_switch,central2motor_motor_switch,central2motor_switch:Bool;
    central2motor_central_stop,central2motor_motor_stop,central2motor_stop;
    motor2central_motor_speed,motor2central_central_speed,motor2central_speed:Nat;   
 
    battery_status_send:Group#BatteryLevel#BatteryStatus; %input from the sensor
    do_provide:Group;
    do_load:Group;
    do_stop:Group;
    %the following are interal actions.
    central2battery_battery_start,central2battery_central_start,central2battery_start;
    central2battery_battery_stop,central2battery_central_stop,central2battery_stop;
    central2battery_central_switch,central2battery_battery_switch,central2battery_switch:Bool;
    battery2central_central_status,battery2central_battery_status,battery2central_status:Group#BatteryStatus;
    b2battery_battery_provide,b2battery_b_provide,b2battery_provide;
    b2battery_battery_status,b2battery_b_status,b2battery_status:BatteryStatus;
    battery2central_battery_energy,battery2central_central_energy,battery2central_energy;
   

    

    status_display:Int#Bool#Direction#BatteryLevel#Bool;%the statuses are speed,motors' temperaturestatus, motors' direction,battery's energy level, battery's temperature status.


%Models a battery
proc Battery(current_battery:Group,l:BatteryLevel,s:BatteryStatus) = 
	%we checkthe  emergency status before starting the battery.if the the battery get a switched on signal
	%then the current battery start to provide if it is groupA,we assume both batteries are full and idle before the car is switched on.
	%start_battery_recieve.
	battery_status_send(current_battery,l,s).(
	%battery2central_battery_status(current_battery,s).Battery(current_battery,l,s)+
	%b2battery_b_status(s).Battery(current_battery,l,s)+
	(s==idle)->(
		(l==full)->(
		 %   central2battery_battery_start.
		    (current_battery==groupA)->(
			central2battery_battery_start.
			do_provide(current_battery).
			battery2central_battery_status(current_battery,provide).
			Battery(groupA,middle,provide)
		%    )<>(
     		%	Battery(current_battery,l,s)
		    )+
		    b2battery_battery_provide.
		    sum bs:BatteryStatus.b2battery_battery_status(bs).
		    (bs!=provide)->do_provide(current_battery).Battery(current_battery,middle,provide)
		    	      <>Battery(current_battery,l,s)
		)+
		(l==low)->(
		    do_load(current_battery).Battery(current_battery,middle,load)
		%    b2battery_battery_provide.
		%    battery2central_battery_energy.Battery(current_battery,low,s)
		)+
		(l==middle)->(
		    do_load(current_battery).Battery(current_battery,full,load)
		%    b2battery_battery_provide.
		%    sum bs:BatteryStatus.b2battery_battery_status(bs).
		%    (bs!=provide)->do_provide(current_battery).Battery(current_battery,low,provide)
		%    	      <>Battery(current_battery,l,s)		
		)
	)+
	%if current providing battery is low then it requests the other to provide and start to load after getting the confirm signal.
	%inform the CC if both batteries cannot provide. 
	(s==provide)->(
		central2battery_battery_stop.do_stop(current_battery).Battery(current_battery,l,idle)+
		(l==middle)->do_provide(current_battery).Battery(current_battery,low,provide)+
		(l==low)->(
		    central2battery_battery_switch(true).%provide only when the car is switched on
		    b2battery_b_provide.do_load(current_battery).b2battery_b_status(load).Battery(current_battery,l,load)
		)
	)+
	(s==load)->(
		central2battery_battery_stop.do_stop(current_battery).Battery(current_battery,l,idle)+
		(l==full)->do_stop(current_battery).Battery(current_battery,full,idle)+
		(l==middle)->(
		   do_load(current_battery).Battery(current_battery,full,load)+
		   b2battery_battery_provide.
		   sum bs:BatteryStatus.b2battery_battery_status(bs).
		   (bs!=provide)->do_provide(current_battery).Battery(current_battery,low,provide)
		    	      <>Battery(current_battery,l,s) 
		)
		+(l==low)->do_load(current_battery).Battery(current_battery,middle,load)
	));
	
%Models a motor
%action is not a condition,also the model should be recursive?
%proc Cmotor(speed:Nat, t:Temperature, d:Direction) =
%	(t == overheated) -> motor_stop +
%	brake_receive.(speed > 0) -> (speed_down) + %????action is not a condition???
%	sum l:Nat.(throttle_receive.(s < l) -> (speed_up) +
%	backward_switched_receive.(d != backward) -> (motor_direction_set(backward)) +
%	forward_switched_receive.(d != forward) -> (motor_direction_set(forward));

proc Motor(on:Bool,m:MotorMode,speed:Nat)= 
	%
	
		(on)->(
			
	%if the break is being pressed
			central2motor_motor_switch(false).speed_down_zero.Motor(false,release,0)+
			(m==decelerate)->(
				speed_down.Motor(on,decelerate,speed_down_by_step(speed))+
				brake_released.Motor(on,release,speed)+
				throttle_pressed.Motor(on,accelerate,speed)
		     	)+
	%if the throttle is being presseff?d
			(m==accelerate)->(
				speed_up.Motor(on,accelerate,speed_up_by_step(speed))+
				sum cruise:Bool,s:Nat.central2motor_motor_cruise(cruise,s).
				(!cruise)->(
			    	    cruise_mode_set.motor2central_motor_cruise(true,speed).Motor(on,m,speed)+
			    	    throttle_released.Motor(on,release,speed)+
			    	    brake_pressed.Motor(on,decelerate,speed)
				)<>(
			    	    cruise_mode_unset.motor2central_motor_cruise(false,speed).Motor(on,m,speed)+
			    	    throttle_released.motor2central_motor_cruise(true,speed).Motor(on,release,speed)+
			    	    brake_pressed.motor2central_motor_cruise(false,speed).Motor(on,decelerate,speed)
				)
		     	)+
	%if neither the break nor the throttle is being pressed
		          (m==release)->(
				sum cruise:Bool,s:Nat.central2motor_motor_cruise(cruise,s).
				(!cruise)->(
			    	    cruise_mode_set.motor2central_motor_cruise(true,speed).Motor(on,release,speed)+
				    brake_pressed.Motor(on,decelerate,speed)+
				    throttle_pressed.Motor(on,accelerate,speed)
				)<>(
			    	    cruise_mode_unset.motor2central_motor_cruise(false,speed).Motor(on,release,speed)+
				    brake_pressed.motor2central_motor_cruise(false,speed).Motor(on,decelerate,speed)+
				    throttle_pressed.Motor(on,accelerate,speed)+
			    	    (speed>=s)->speed_down.Motor(on,release,speed_down_by_step(speed))
				              <>speed_up.Motor(on,release,speed_up_by_step(speed))
				)
			
		     	)
                   	)<>(
			central2motor_motor_switch(true).Motor(true,release,0)
		);
%Models the Safety control


%Models the central control
proc Central(start_switch:Bool,emergency:Bool,cruise:Bool,desired_speed:Nat) = 	
	emergency->(
		central2battery_central_stop.central2motor_central_stop.Central(false,true,false,desired_speed)
	)<>(
		(!start_switch)->(
		   % sum s:Nat.motor2central_central_speed(s).
		    %(s==0)->(
			do_switch_on.central2battery_central_start.
		%	sum status:BatteryStatus.battery2central_central_status(current_battery,status).
		%    	(status==provide)->
		%		Central(!start_switch,emergency,cruise,desired_speed)
		%		<>Central(start_switch,emergency,cruise,desired_speed)+
			battery2central_central_status(groupA,provide).
			Central(!start_switch,emergency,cruise,desired_speed)+
			central2battery_central_switch(start_switch).
			Central(start_switch,emergency,cruise,desired_speed)

		   % )<>Central(start_switch,emergency,cruise,desired_speed)
		)<>(
		    (do_switch_off+battery2central_central_energy).
		    %central2motor_central_stop.
		    central2battery_central_stop.
		    Central(!start_switch,emergency,cruise,desired_speed)+
		    central2motor_central_cruise(cruise,desired_speed).
		    Central(start_switch,emergency,cruise,desired_speed)+
		    sum c:Bool,speed:Nat.motor2central_central_cruise(c,speed).Central(start_switch,emergency,c,speed)
		    
		)+
		central2motor_central_switch(start_switch).Central(start_switch,emergency,cruise,desired_speed)
	);
				
init allow({battery_status_send,do_provide,do_load,do_stop,do_switch_on,do_switch_off,
	brake_pressed,brake_released,throttle_pressed,throttle_released,
	cruise_mode_set,cruise_mode_unset,speed_up,speed_down,speed_down_zero,
	motor2central_cruise,
	central2motor_cruise,
	central2motor_switch,	
	central2motor_stop,
	motor2central_speed,
	central2battery_start,
	central2battery_stop,
	central2battery_switch,
	battery2central_status,
	b2battery_provide,
	battery2central_energy},
	comm({
	motor2central_motor_cruise|motor2central_central_cruise->motor2central_cruise,
    	central2motor_central_cruise|central2motor_motor_cruise->central2motor_cruise,
    	central2motor_central_switch|central2motor_motor_switch->central2motor_switch,
    	central2motor_central_stop|central2motor_motor_stop->central2motor_stop,
    	motor2central_motor_speed|motor2central_central_speed->motor2central_speed,
	central2battery_battery_start|central2battery_central_start->central2battery_start,
    	central2battery_battery_stop|central2battery_central_stop->central2battery_stop,
    	central2battery_central_switch|central2battery_battery_switch->central2battery_switch,
    	battery2central_central_status|battery2central_battery_status->battery2central_status,
    	b2battery_battery_provide|b2battery_b_provide->b2battery_provide,
    	battery2central_battery_energy|battery2central_central_energy->battery2central_energy},
	Battery(groupA,full,idle)||Battery(groupB,full,idle)
	||Motor(false,release,0)||Central(false,false,false,0))
	);	
    